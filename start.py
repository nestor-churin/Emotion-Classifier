#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫—É —Å–∏—Å—Ç–µ–º–∏ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –µ–º–æ—Ü—ñ–π
"""
import asyncio
import argparse
import site
import sys
import os
import subprocess

from config import settings, validate_settings, create_directories, print_settings
from emotion_classifier import EmotionClassifier
from database import DatabaseManager
from utils import setup_logging

async def setup_system():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏"""
    print("üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –µ–º–æ—Ü—ñ–π...")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
    create_directories()
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    setup_logging(settings.LOG_LEVEL, settings.LOG_FILE)
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    validate_settings()
    
    # –í–∏–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    print_settings()
    
    return True

async def train_model():
    """–ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ"""
    print("üß† –ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ...")
    classifier = EmotionClassifier()
    
    # –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ –∑ –¥–∞—Ç–∞—Å–µ—Ç–æ–º –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    dataset_path = os.path.join(settings.DATASET_PATH, "all_data.csv")
    success = classifier.train_model(dataset_path)
    
    if success:
        print("‚úÖ –ú–æ–¥–µ–ª—å –Ω–∞–≤—á–µ–Ω–∞!")
        print("üìä –ú–æ–¥–µ–ª—å –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
        return True
    else:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ")
        return False

async def test_classifier():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞"""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞...")
    
    classifier = EmotionClassifier()
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ
    if not classifier.load_model():
        print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–≤—á—ñ—Ç—å –º–æ–¥–µ–ª—å –∫–æ–º–∞–Ω–¥–æ—é: python start.py --train")
        return False
    
    # –¢–µ—Å—Ç–æ–≤—ñ —Ç–µ–∫—Å—Ç–∏
    test_texts = [
        "–Ø –¥—É–∂–µ —â–∞—Å–ª–∏–≤–∏–π —Å—å–æ–≥–æ–¥–Ω—ñ! –¶–µ —á—É–¥–æ–≤–∏–π –¥–µ–Ω—å!",
        "–ú–µ–Ω–µ –¥—É–∂–µ –∑–ª–∏—Ç—å —Ü—è —Å–∏—Ç—É–∞—Ü—ñ—è, —Ü–µ –ø—Ä–æ—Å—Ç–æ –∂–∞—Ö–ª–∏–≤–æ!",
        "–ú–µ–Ω—ñ —Å—É–º–Ω–æ —á–µ—Ä–µ–∑ —Ç–µ, —â–æ —Å—Ç–∞–ª–æ—Å—è...",
        "–ë–æ—é—Å—è, —â–æ —â–æ—Å—å –ø–æ–≥–∞–Ω–µ –º–æ–∂–µ —Å—Ç–∞—Ç–∏—Å—è",
        "–ù–µ –º–æ–∂—É –ø–æ–≤—ñ—Ä–∏—Ç–∏, —â–æ —Ü–µ —Å—Ç–∞–ª–æ—Å—è! –Ø–∫–µ –¥–∏–≤–æ!",
        "–¶–µ –æ–≥–∏–¥–Ω–æ —ñ –ø—Ä–æ—Ç–∏–≤–Ω–æ. –§—É!"
    ]
    
    print("\nüìù –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
    print("=" * 70)
    
    for i, text in enumerate(test_texts, 1):
        predicted_emotion, confidence, all_emotions = classifier.predict_emotion(text)
        
        print(f"\n{i}. –¢–µ–∫—Å—Ç: {text}")
        print(f"   –ï–º–æ—Ü—ñ—è: {predicted_emotion}")
        print(f"   –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {confidence:.3f}")
        print(f"   –í—Å—ñ –µ–º–æ—Ü—ñ—ó: {', '.join([f'{k}: {v:.3f}' for k, v in all_emotions.items()])}")
    
    print("=" * 70)
    print("‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    return True

async def init_database():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    print("üóÑÔ∏è –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
    
    db_manager = DatabaseManager(settings.DATABASE_PATH)
    await db_manager.init_db()
    
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞!")
    
    return True

def run_server():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üåê –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
    
    import uvicorn
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –º–æ–¥–µ–ª—ñ
    classifier = EmotionClassifier()
    
    if not classifier.load_model():
        print("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ù–∞–≤—á–∞—î–º–æ –Ω–æ–≤—É –º–æ–¥–µ–ª—å...")
        # –ù–∞–≤—á–∞—î–º–æ –º–æ–¥–µ–ª—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        asyncio.run(train_model())
    
    print(f"üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –Ω–∞ http://{settings.HOST}:{settings.PORT}")
    print(f"üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è API: http://{settings.HOST}:{settings.PORT}/docs")
    print("üõë –î–ª—è –∑—É–ø–∏–Ω–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C")
    
    uvicorn.run(
        "main:app",
        host=settings.HOST,
        port=settings.PORT,
        reload=settings.DEBUG,
        log_level=settings.LOG_LEVEL.lower()
    )

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    parser = argparse.ArgumentParser(description="–°–∏—Å—Ç–µ–º–∞ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –µ–º–æ—Ü—ñ–π")
    
    parser.add_argument(
        "--setup",
        action="store_true",
        help="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏"
    )
    
    parser.add_argument(
        "--train",
        action="store_true",
        help="–ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ"
    )
    
    parser.add_argument(
        "--test",
        action="store_true",
        help="–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞"
    )
    
    parser.add_argument(
        "--init-db",
        action="store_true",
        help="–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"
    )
    
    parser.add_argument(
        "--server",
        action="store_true",
        help="–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"
    )
    
    args = parser.parse_args()
    
    # –Ø–∫—â–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤, –∑–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä
    if not any(vars(args).values()):
        args.server = True
    
    try:
        if args.setup:
            asyncio.run(setup_system())
        
        elif args.train:
            asyncio.run(setup_system())
            asyncio.run(train_model())
        
        elif args.test:
            asyncio.run(setup_system())
            asyncio.run(test_classifier())
        
        elif args.init_db:
            asyncio.run(setup_system())
            asyncio.run(init_database())
        elif args.server:
            asyncio.run(setup_system())
            run_server()
    
    except KeyboardInterrupt:
        print("\nüõë –†–æ–±–æ—Ç—É –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
